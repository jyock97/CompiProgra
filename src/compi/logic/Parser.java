
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 14 14:17:35 CST 2017
//----------------------------------------------------

package compi.logic;

import java_cup.runtime.*;
import compi.logic.datastructures.*;
import compi.codegenerator.*;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 14 14:17:35 CST 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\025\002\000\002\002\006\000\002\002" +
    "\004\000\002\005\005\000\002\005\002\000\002\010\004" +
    "\000\002\010\006\000\002\010\005\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\003\010\000\002" +
    "\006\004\000\002\006\002\000\002\011\004\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\022\003\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\003\000\002" +
    "\026\002\000\002\027\002\000\002\030\002\000\002\012" +
    "\015\000\002\031\002\000\002\013\007\000\002\013\002" +
    "\000\002\032\002\000\002\033\002\000\002\014\013\000" +
    "\002\015\004\000\002\016\007\000\002\017\007\000\002" +
    "\007\004\000\002\007\002\000\002\034\002\000\002\004" +
    "\012\000\002\024\005\000\002\024\002\000\002\023\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\014\024\001\036\001\037\001\040\001\044" +
    "\001\001\002\000\004\002\165\001\002\000\014\024\ufffd" +
    "\036\ufffd\037\ufffd\040\ufffd\044\ufffd\001\002\000\014\024" +
    "\013\036\010\037\012\040\014\044\007\001\002\000\004" +
    "\023\113\001\002\000\004\044\ufff9\001\002\000\004\044" +
    "\162\001\002\000\004\044\ufff8\001\002\000\004\010\155" +
    "\001\002\000\004\044\ufff7\001\002\000\004\014\154\001" +
    "\002\000\006\002\uffcd\044\uffcd\001\002\000\006\002\000" +
    "\044\021\001\002\000\006\002\uffce\044\uffce\001\002\000" +
    "\004\010\uffcc\001\002\000\004\010\023\001\002\000\004" +
    "\011\024\001\002\000\004\012\025\001\002\000\040\010" +
    "\ufff4\013\ufff4\025\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4" +
    "\034\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043" +
    "\ufff4\044\ufff4\001\002\000\040\010\042\013\uffc9\025\041" +
    "\027\035\030\046\031\047\032\051\034\040\036\010\037" +
    "\012\040\014\041\044\042\053\043\037\044\043\001\002" +
    "\000\032\004\uffe7\005\uffe7\006\uffe7\007\uffe7\011\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\001\002\000\040\010\ufff1\013\ufff1\025\ufff1\027\ufff1\030" +
    "\ufff1\031\ufff1\032\ufff1\034\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\041\ufff1\042\ufff1\043\ufff1\044\ufff1\001\002\000\040\010" +
    "\uffef\013\uffef\025\uffef\027\uffef\030\uffef\031\uffef\032\uffef" +
    "\034\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043" +
    "\uffef\044\uffef\001\002\000\004\013\153\001\002\000\040" +
    "\010\ufff5\013\ufff5\025\ufff5\027\ufff5\030\ufff5\031\ufff5\032" +
    "\ufff5\034\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5" +
    "\043\ufff5\044\ufff5\001\002\000\030\004\063\005\057\006" +
    "\067\007\064\014\152\015\070\016\060\017\071\020\061" +
    "\021\065\022\062\001\002\000\004\010\uffd4\001\002\000" +
    "\032\004\uffe6\005\uffe6\006\uffe6\007\uffe6\011\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\001" +
    "\002\000\032\004\uffdc\005\uffdc\006\uffdc\007\uffdc\011\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\001\002\000\022\010\042\036\010\037\012\040\014" +
    "\041\044\042\053\043\037\044\043\001\002\000\004\010" +
    "\uffdb\001\002\000\022\010\042\036\010\037\012\040\014" +
    "\041\044\042\053\043\037\044\043\001\002\000\036\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\010\112\011\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\113\001\002\000\032\004\uffe4\005\uffe4\006\uffe4\007\uffe4" +
    "\011\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\001\002\000\040\010\ufff0\013\ufff0\025\ufff0" +
    "\027\ufff0\030\ufff0\031\ufff0\032\ufff0\034\ufff0\036\ufff0\037" +
    "\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\001\002" +
    "\000\004\014\111\001\002\000\004\010\105\001\002\000" +
    "\040\010\ufff2\013\ufff2\025\ufff2\027\ufff2\030\ufff2\031\ufff2" +
    "\032\ufff2\034\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042" +
    "\ufff2\043\ufff2\044\ufff2\001\002\000\004\010\055\001\002" +
    "\000\032\004\uffed\005\uffed\006\uffed\007\uffed\011\uffed\014" +
    "\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed" +
    "\001\002\000\032\004\uffe3\005\uffe3\006\uffe3\007\uffe3\011" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\001\002\000\040\010\uffee\013\uffee\025\uffee\027" +
    "\uffee\030\uffee\031\uffee\032\uffee\034\uffee\036\uffee\037\uffee" +
    "\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\001\002\000" +
    "\022\010\042\036\010\037\012\040\014\041\044\042\053" +
    "\043\037\044\043\001\002\000\030\004\063\005\057\006" +
    "\067\007\064\011\066\015\070\016\060\017\071\020\061" +
    "\021\065\022\062\001\002\000\022\010\042\036\010\037" +
    "\012\040\014\041\044\042\053\043\037\044\043\001\002" +
    "\000\022\010\042\036\010\037\012\040\014\041\044\042" +
    "\053\043\037\044\043\001\002\000\022\010\042\036\010" +
    "\037\012\040\014\041\044\042\053\043\037\044\043\001" +
    "\002\000\022\010\042\036\010\037\012\040\014\041\044" +
    "\042\053\043\037\044\043\001\002\000\022\010\042\036" +
    "\010\037\012\040\014\041\044\042\053\043\037\044\043" +
    "\001\002\000\022\010\042\036\010\037\012\040\014\041" +
    "\044\042\053\043\037\044\043\001\002\000\022\010\042" +
    "\036\010\037\012\040\014\041\044\042\053\043\037\044" +
    "\043\001\002\000\004\014\075\001\002\000\022\010\042" +
    "\036\010\037\012\040\014\041\044\042\053\043\037\044" +
    "\043\001\002\000\022\010\042\036\010\037\012\040\014" +
    "\041\044\042\053\043\037\044\043\001\002\000\022\010" +
    "\042\036\010\037\012\040\014\041\044\042\053\043\037" +
    "\044\043\001\002\000\032\004\063\005\057\006\067\007" +
    "\064\011\uffde\014\uffde\015\070\016\uffde\017\uffde\020\061" +
    "\021\065\022\062\001\002\000\032\004\063\005\057\006" +
    "\067\007\064\011\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\001\002\000\032\004\uffea\005" +
    "\uffea\006\uffea\007\uffea\011\uffea\014\uffea\015\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\022\uffea\001\002\000\040\010" +
    "\uffcf\013\uffcf\025\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\034\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\001\002\000\032\004\063\005\057\006\067" +
    "\007\064\011\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020" +
    "\uffe0\021\uffe0\022\uffe0\001\002\000\032\004\uffe9\005\uffe9" +
    "\006\uffe9\007\uffe9\011\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\001\002\000\032\004\uffec" +
    "\005\uffec\006\067\007\064\011\uffec\014\uffec\015\uffec\016" +
    "\uffec\017\uffec\020\uffec\021\uffec\022\uffec\001\002\000\032" +
    "\004\063\005\057\006\067\007\064\011\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\001\002" +
    "\000\032\004\063\005\057\006\067\007\064\011\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\001\002\000\032\004\063\005\057\006\067\007\064\011" +
    "\uffdf\014\uffdf\015\070\016\uffdf\017\uffdf\020\061\021\065" +
    "\022\062\001\002\000\032\004\uffeb\005\uffeb\006\067\007" +
    "\064\011\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\001\002\000\022\010\042\036\010\037" +
    "\012\040\014\041\044\042\053\043\037\044\043\001\002" +
    "\000\030\004\063\005\057\006\067\007\064\011\107\015" +
    "\070\016\060\017\071\020\061\021\065\022\062\001\002" +
    "\000\004\014\110\001\002\000\040\010\uffd0\013\uffd0\025" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\034\uffd0\036\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\001" +
    "\002\000\040\010\uffd1\013\uffd1\025\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\034\uffd1\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\044\uffd1\001\002\000\004\011\115" +
    "\001\002\000\022\010\042\036\010\037\012\040\014\041" +
    "\044\042\053\043\037\044\043\001\002\000\032\004\063" +
    "\005\057\006\067\007\064\011\ufffa\014\ufffa\015\070\016" +
    "\060\017\071\020\061\021\065\022\062\001\002\000\032" +
    "\004\uffc8\005\uffc8\006\uffc8\007\uffc8\011\uffc8\014\uffc8\015" +
    "\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\001\002" +
    "\000\030\004\063\005\057\006\067\007\064\011\117\015" +
    "\070\016\060\017\071\020\061\021\065\022\062\001\002" +
    "\000\032\004\uffe8\005\uffe8\006\uffe8\007\uffe8\011\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\001\002\000\004\010\121\001\002\000\022\010\042\036" +
    "\010\037\012\040\014\041\044\042\053\043\037\044\043" +
    "\001\002\000\030\004\uffed\005\uffed\006\uffed\007\uffed\011" +
    "\124\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed" +
    "\001\002\000\026\004\063\005\057\006\067\007\064\015" +
    "\070\016\060\017\071\020\061\021\065\022\062\001\002" +
    "\000\004\012\uffda\001\002\000\004\012\126\001\002\000" +
    "\036\010\ufff4\013\ufff4\025\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043" +
    "\ufff4\044\ufff4\001\002\000\036\010\042\013\130\025\041" +
    "\027\035\030\046\031\047\032\051\036\010\037\012\040" +
    "\014\041\044\042\053\043\037\044\043\001\002\000\042" +
    "\010\uffd9\013\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\034\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\044\uffd9\001\002\000\042\010\uffd5\013" +
    "\uffd5\025\uffd5\026\133\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\034\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\001\002\000\040\010\uffd8\013\uffd8\025\uffd8" +
    "\027\uffd8\030\uffd8\031\uffd8\032\uffd8\034\uffd8\036\uffd8\037" +
    "\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\001\002" +
    "\000\004\012\uffd7\001\002\000\004\012\135\001\002\000" +
    "\036\010\ufff4\013\ufff4\025\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043" +
    "\ufff4\044\ufff4\001\002\000\036\010\042\013\137\025\041" +
    "\027\035\030\046\031\047\032\051\036\010\037\012\040" +
    "\014\041\044\042\053\043\037\044\043\001\002\000\040" +
    "\010\uffd6\013\uffd6\025\uffd6\027\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\034\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6" +
    "\043\uffd6\044\uffd6\001\002\000\030\004\063\005\057\006" +
    "\067\007\064\014\141\015\070\016\060\017\071\020\061" +
    "\021\065\022\062\001\002\000\004\013\uffca\001\002\000" +
    "\004\010\143\001\002\000\022\010\042\036\010\037\012" +
    "\040\014\041\044\042\053\043\037\044\043\001\002\000" +
    "\030\004\uffed\005\uffed\006\uffed\007\uffed\011\145\015\uffed" +
    "\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\001\002\000" +
    "\004\012\uffd3\001\002\000\004\012\147\001\002\000\036" +
    "\010\ufff4\013\ufff4\025\ufff4\027\ufff4\030\ufff4\031\ufff4\032" +
    "\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4" +
    "\044\ufff4\001\002\000\036\010\042\013\151\025\041\027" +
    "\035\030\046\031\047\032\051\036\010\037\012\040\014" +
    "\041\044\042\053\043\037\044\043\001\002\000\040\010" +
    "\uffd2\013\uffd2\025\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\034\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043" +
    "\uffd2\044\uffd2\001\002\000\040\010\ufff3\013\ufff3\025\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\032\ufff3\034\ufff3\036\ufff3\037" +
    "\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\001\002" +
    "\000\006\002\uffcb\044\uffcb\001\002\000\014\024\ufffe\036" +
    "\ufffe\037\ufffe\040\ufffe\044\ufffe\001\002\000\004\011\156" +
    "\001\002\000\004\012\157\001\002\000\036\010\ufff4\013" +
    "\ufff4\025\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\036\ufff4" +
    "\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\001" +
    "\002\000\036\010\042\013\161\025\041\027\035\030\046" +
    "\031\047\032\051\036\010\037\012\040\014\041\044\042" +
    "\053\043\037\044\043\001\002\000\006\002\ufff6\044\ufff6" +
    "\001\002\000\034\004\ufffc\005\ufffc\006\ufffc\007\ufffc\011" +
    "\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\023\163\001\002\000\022\010\042\036\010\037" +
    "\012\040\014\041\044\042\053\043\037\044\043\001\002" +
    "\000\032\004\063\005\057\006\067\007\064\011\ufffb\014" +
    "\ufffb\015\070\016\060\017\071\020\061\021\065\022\062" +
    "\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\006\002\003\025\004\001\001\000\002\001" +
    "\001\000\004\005\005\001\001\000\010\003\015\010\014" +
    "\020\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\016\001\001\000" +
    "\004\004\017\001\001\000\002\001\001\000\004\034\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\025\001\001\000\032\010\026\011\032" +
    "\012\047\014\027\015\044\016\030\017\053\020\010\021" +
    "\051\022\033\023\035\024\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\010\026\020" +
    "\010\021\051\022\137\023\035\001\001\000\004\026\117" +
    "\001\001\000\014\010\026\020\010\021\051\022\115\023" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\010\026\020\010\021\051\022" +
    "\055\023\035\001\001\000\002\001\001\000\014\010\026" +
    "\020\010\021\051\022\103\023\035\001\001\000\014\010" +
    "\026\020\010\021\051\022\102\023\035\001\001\000\014" +
    "\010\026\020\010\021\051\022\101\023\035\001\001\000" +
    "\014\010\026\020\010\021\051\022\100\023\035\001\001" +
    "\000\014\010\026\020\010\021\051\022\077\023\035\001" +
    "\001\000\014\010\026\020\010\021\051\022\076\023\035" +
    "\001\001\000\014\010\026\020\010\021\051\022\075\023" +
    "\035\001\001\000\002\001\001\000\014\010\026\020\010" +
    "\021\051\022\073\023\035\001\001\000\014\010\026\020" +
    "\010\021\051\022\072\023\035\001\001\000\014\010\026" +
    "\020\010\021\051\022\071\023\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\026\020\010\021\051\022\105\023" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\026\020\010\021\051\022\113\023\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\026\020\010\021\121" +
    "\022\122\023\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\124\001\001\000\002\001\001\000\004" +
    "\006\126\001\001\000\030\010\026\011\032\012\047\014" +
    "\027\015\044\016\030\017\053\020\010\021\051\022\033" +
    "\023\035\001\001\000\004\030\130\001\001\000\004\013" +
    "\131\001\001\000\002\001\001\000\004\031\133\001\001" +
    "\000\002\001\001\000\004\006\135\001\001\000\030\010" +
    "\026\011\032\012\047\014\027\015\044\016\030\017\053" +
    "\020\010\021\051\022\033\023\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\026\020\010\021\143\022\122\023\035\001" +
    "\001\000\002\001\001\000\004\033\145\001\001\000\002" +
    "\001\001\000\004\006\147\001\001\000\030\010\026\011" +
    "\032\012\047\014\027\015\044\016\030\017\053\020\010" +
    "\021\051\022\033\023\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\157\001\001\000" +
    "\030\010\026\011\032\012\047\014\027\015\044\016\030" +
    "\017\053\020\010\021\051\022\033\023\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\026\020\010" +
    "\021\051\022\163\023\035\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/*
  public void report_fatal_error(String message, Object info){
      //System.err.println("Can't recover from previous error(s), giving up.");
      System.err.println("Error tipo 1");
    }

    public void report_error(String message, Object info){
      System.out.println("Error tipo 2");
    }
    
    public void syntax_error(Symbol cur_token){
    	System.out.println("Error tipo 3");
    }
    
    public void unrecovered_syntax_error(Symbol cur_token){
    	System.out.println("Error tipo 4");
    }*/

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {



	int ifCont = 0,
		ifContAux = 0,
		whileCont = 0,
		whileContAux = 0,
		subProgramCont = 0;
	Stack ifStack = new Stack();
	Stack whileStack = new Stack();
	StringBuilder semanticErrors;
	TypeTable tTable;
	CodeGenerator cGenerator;
	FinalCodeGenerator fGenerator;
        public  SemanticError sErrors =  SemanticError.createSemanticError();
	
	public void setSemanticErrrors(){
		sErrors.sb = semanticErrors;
	}
	
	private void generateFCode(){
		fGenerator = new FinalCodeGenerator(cGenerator.sBuilder.toString());
		fGenerator.generate();
	}
	
	private void initDataStructures(){
		semanticErrors = new StringBuilder(); 
		tTable = new TypeTable();
		cGenerator = CodeGenerator.getCodeGenerator(tTable);
	}
	
	private void errorIdDeclarationExist(String id){
		//crear un string builder para poner todos los posibles errores
		System.out.println("[ERROR]: El identificador <" + id + "> ya fue declarado.");
		semanticErrors.append("[ERROR]: El identificador <" + id + "> ya fue declarado. \n");
	}
	
	private void errorIdDeclarationNotExist(String id){
		//crear un string builder para poner todos los posibles errores
		System.out.println("[ERROR]: El identificador <" + id + "> no se ha declarado.");
		semanticErrors.append("[ERROR]: El identificador <" + id + "> no se ha declarado. \n");
	}
	
	/*private void errorTypeFormat(int type){
		//crear un string builder para poner todos los posibles errores
		System.out.println("[ERROR]: <" + type + "> no es un formato valido para un entero.");
		semanticErrors.append("[ERROR]: <" + type + "> no es un formato valido para un entero. \n");
	}*/
	
	private void errorNoWhileForBreak(){
		System.out.println("[ERROR]: Sentencia <break> fuera de un <while>");
		semanticErrors.append("[ERROR]: Sentencia <break> fuera de un <while> \n");
	}
	
	private void errorSubProgramDeclaration(String id){
		System.out.println("[ERROR]: No se puede declarar la variable <" + id + ">, ya existe un procedimiento <" + id + ">");
		semanticErrors.append("[ERROR]: No se puede declarar la variable <" + id + ">, ya existe un procedimiento <" + id + "> \n");
	}
	
	private void errorIdDeclarationSubProgram(String id){
		System.out.println("[ERROR]: Procedimiento <" + id + "> ya fue declarado");
		semanticErrors.append("[ERROR]: Procedimiento <" + id + "> ya fue declarado \n");
	}
	
	private void errorAssignNullProcedure(String id){
		System.out.println("[ERROR]: No se asigna ningun valor a la variable <" + id + ">");
		semanticErrors.append("[ERROR]: No se asigna ningun valor a la variable <" + id + "> \n");
	}
	
	private void errorAssignDiferentType(String id, Expression e){
		String type = "desconocido";
		
		switch (e.getType()) {
		case sym.INTEGER:
			type = "Integer";
			break;
			
		case sym.STRING:
			type = "STRING";
			break;
			
		case sym.BOOLEAN:
			type = "BOOLEAN";
			break;
		}
		System.out.println("[ERROR]: Variable <" + id + "> no es de tipo <" + type + ">");
		semanticErrors.append("[ERROR]: Variable <" + id + "> no es de tipo <" + type + "> \n");
	}
	
	private void errorNoProcedure(String id){
		System.out.println("[ERROR]: No existe el procedimiento <" + id + ">");
		semanticErrors.append("[ERROR]: No existe el procedimiento <" + id + "> \n");
	}
	
	private void errorPrintDiferentType(){
		System.out.println("[ERROR]: No es posible imprimir ese tipo de dato");
		semanticErrors.append("[ERROR]: No es posible imprimir ese tipo de dato\n");
	}
	
	private void validateIdsProcedures(){
		//validar si los ids que use, no existe ningun procedimiento
		//validar si el metodo declarado retorna el mismo tipo que la variable
	}

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // subProgramCall ::= ID LPAREN RPAREN 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
									Integer t = tTable.getProcedure(id);
									if(t != null){
										cGenerator.generateSubProgramCall(id);
										RESULT = new Expression(0, t);
									}else{
										errorNoProcedure(id);
									}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subProgramCall",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // returnStatement ::= 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnStatement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // returnStatement ::= RETURN expr SEMICOLON 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
									cGenerator.generateReturn(e);
									RESULT = e;
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnStatement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // subProgram ::= ID NT$7 LPAREN RPAREN LBRACE lstStatement returnStatement RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
									if(e != null){
										tTable.addProcedure(id, e.getType());
									}
                                                                        tTable.deleteScope();
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subProgram",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$7 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                                                                        tTable.createScope();
									if(tTable.getProcedure(id) == null){
										tTable.addProcedure(id, sym.NULL);
										cGenerator.generateLabel(id);
									}else{
										errorSubProgramDeclaration(id);
									}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // lstSubProgram ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lstSubProgram",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lstSubProgram ::= lstSubProgram subProgram 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lstSubProgram",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // putsStatement ::= PUTS LPAREN expr RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
									if(e.getType() == sym.STRING)
										cGenerator.printString(e);
									else
										errorPrintDiferentType();
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("putsStatement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // putwStatement ::= PUTW LPAREN expr RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
									if(e.getType() == sym.INTEGER)
										cGenerator.printNumber(e);
									else
										errorPrintDiferentType();
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("putwStatement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // breakStatement ::= BREAK SEMICOLON 
            {
              Object RESULT =null;
		
									if(whileCont != 0){									
									
										cGenerator.generateBranch("EndWhile#" + whileCont);
									}else{
									
										errorNoWhileForBreak();
									}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("breakStatement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // whileStatement ::= WHILE NT$5 LPAREN condition RPAREN NT$6 LBRACE lstStatement RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
									tTable.deleteScope();
									cGenerator.generateLabel("InitWhile#" + whileStack.peek());
									whileStack.pop();
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileStatement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

									cGenerator.generateBranchNotTrue("EndWhile#" + whileStack.peek(), e);
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$5 ::= 
            {
              Object RESULT =null;

									tTable.createScope();
									whileStack.push(++whileCont);
									cGenerator.generateLabel("InitWhile#" + whileStack.peek());
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // elseStatement ::= 
            {
              Object RESULT =null;
		
									cGenerator.generateLabel("Else#" + ifStack.peek());
									cGenerator.generateLabel("EndIf#" + ifStack.peek());
									ifStack.pop();
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseStatement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // elseStatement ::= ELSE NT$4 LBRACE lstStatement RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
									tTable.deleteScope();
									cGenerator.generateLabel("EndIf#" + ifStack.peek());
									ifStack.pop();
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseStatement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$4 ::= 
            {
              Object RESULT =null;

									tTable.createScope();
									cGenerator.generateLabel("Else#" + ifStack.peek());
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ifStatement ::= IF NT$1 LPAREN condition RPAREN NT$2 LBRACE lstStatement RBRACE NT$3 elseStatement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

									tTable.deleteScope();
									cGenerator.generateBranch("EndIf#" + ifStack.peek());
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

                                	cGenerator.generateBranchNotTrue("Else#" + ++ifCont, e);
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$1 ::= 
            {
              Object RESULT =null;

									tTable.createScope();
									ifStack.push(++ifCont);
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condition ::= BOOLEAN_LITERAL 
            {
              Expression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									Expression e = new Expression(cGenerator.direction++, sym.BOOLEAN);
									cGenerator.generateBooleanLiteral(b, e);
									RESULT = e;
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condition ::= expr DIF expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									RESULT = e1.dif(e2);
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condition ::= expr OR expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									RESULT = e1.or(e2);
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condition ::= expr AND expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									RESULT = e1.and(e2);
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condition ::= expr LESS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									RESULT = e1.less(e2);
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condition ::= expr GREATER expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									RESULT = e1.greater(e2);
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condition ::= expr EQUALS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									RESULT = e1.equals(e2);
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                	Expression e = new Expression(cGenerator.direction++, sym.INTEGER);
                                	cGenerator.generateIntegerLiteral(i, e);
                                	RESULT = e;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= STRING_LITERAL 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                	Expression e = new Expression(cGenerator.direction++, sym.STRING);
                                	cGenerator.direction += l.length() - 2;
                                	cGenerator.generateStringLiteral(l, e);
                                	RESULT = e;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= ID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                	if(tTable.getSymbol(id) != null){
	                                	RESULT = new Expression(tTable.getSymbol(id).getDirection(), tTable.getSymbol(id).getType()); 
									}else{
										errorIdDeclarationNotExist(id);
									}
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= subProgramCall 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                	RESULT = e;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= declaration 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                	RESULT = e;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr DIV expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                	RESULT = e1.div(e2);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr TIMES expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                	RESULT = e1.mul(e2);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                	RESULT = e1.sub(e2);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr ADD expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                	RESULT = e1.add(e2);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= condition 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                	RESULT = e;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= putsStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= putwStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= breakStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= whileStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= ifStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lstStatement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lstStatement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lstStatement ::= lstStatement statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lstStatement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // mainProgram ::= MAIN LPAREN RPAREN LBRACE lstStatement RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // varType ::= BOOLEAN 
            {
              Integer RESULT =null;
		
									RESULT = sym.BOOLEAN;
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varType",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varType ::= STRING 
            {
              Integer RESULT =null;
		
									RESULT = sym.STRING;
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varType",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varType ::= INTEGER 
            {
              Integer RESULT =null;
		
									RESULT = sym.INTEGER;
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varType",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= ID ASSIGN expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									if(tTable.getSymbol(id) != null){
										Integer t = tTable.getSymbol(id).getType();
										if(e != null){
											if(e.getType() != sym.NULL){											
												if(t == e.getType()){
													cGenerator.generateID_EXPR(id, e);
												}else{
													errorAssignDiferentType(id, e);
												}
											}else{
												errorAssignNullProcedure(id);
											}
										}
									}else{
										errorIdDeclarationNotExist(id);
									}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= varType ID ASSIGN expr 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									if(tTable.getSymbol(id) == null){
										if(tTable.getProcedure(id) == null){
											if(e != null){											
												if(e.getType() != sym.NULL){											
													if(t == e.getType()){
														tTable.addSymbol(id, t, cGenerator.direction++);
														tTable.addId(id, t);
														cGenerator.generateID(id);
														cGenerator.generateID_EXPR(id, e);
													}else{
														errorAssignDiferentType(id, e);
													}
												}else{
													errorAssignNullProcedure(id);
												}
											}
										}else{
											errorIdDeclarationSubProgram(id);
										}
									}else{
										errorIdDeclarationExist(id);
									}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= varType ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									if(tTable.getSymbol(id) == null){
										if(tTable.getProcedure(id) == null){
											tTable.addSymbol(id, t, cGenerator.direction++);
											tTable.addId(id, t);
											cGenerator.generateID(id);
										}else{
											errorIdDeclarationSubProgram(id);
										}
									}else{
										errorIdDeclarationExist(id);
									}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lstDeclaration ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lstDeclaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lstDeclaration ::= lstDeclaration declaration SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lstDeclaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= NT$0 lstDeclaration mainProgram lstSubProgram 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
								//System.out.println(cGenerator.sBuilder);
								System.out.println("\n");
								validateIdsProcedures();
                                                                setSemanticErrrors();
								generateFCode();
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;

									initDataStructures();
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

