
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compi.logic;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\002\011\000\002\002\004\000\002\005" +
    "\004\000\002\005\003\000\002\006\004\000\002\006\003" +
    "\000\002\006\003\000\002\007\015\000\002\007\011\000" +
    "\002\010\011\000\002\003\005\000\002\003\004\000\002" +
    "\004\004\000\002\004\006\000\002\004\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\003\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\006\000\002\012" +
    "\006\000\002\012\006\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\006\033\010\037\004\001\002\000\004\023" +
    "\061\001\002\000\010\025\070\033\010\037\004\001\002" +
    "\000\004\012\067\001\002\000\004\002\066\001\002\000" +
    "\004\037\011\001\002\000\034\004\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\011\ufff5\012\ufff5\013\ufff5\016\ufff5\017\ufff5\020" +
    "\ufff5\021\ufff5\022\ufff5\023\012\001\002\000\024\010\024" +
    "\024\014\031\020\032\022\033\010\034\025\035\013\036" +
    "\017\037\021\001\002\000\032\004\uffde\005\uffde\006\uffde" +
    "\007\uffde\011\uffde\012\uffde\013\uffde\016\uffde\017\uffde\020" +
    "\uffde\021\uffde\022\uffde\001\002\000\032\004\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\011\uffdf\012\uffdf\013\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\001\002\000\032\004\uffe2" +
    "\005\uffe2\006\uffe2\007\uffe2\011\uffe2\012\uffe2\013\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\001\002\000\032" +
    "\004\uffe1\005\uffe1\006\uffe1\007\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\001\002" +
    "\000\032\004\uffec\005\uffec\006\uffec\007\uffec\011\uffec\012" +
    "\uffec\013\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\001\002\000\004\010\063\001\002\000\034\004\uffe0\005" +
    "\uffe0\006\uffe0\007\uffe0\011\uffe0\012\uffe0\013\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\061\001\002\000" +
    "\004\010\054\001\002\000\032\004\033\005\027\006\037" +
    "\007\034\011\ufff4\012\ufff4\013\040\016\030\017\041\020" +
    "\031\021\035\022\032\001\002\000\024\010\024\024\014" +
    "\031\020\032\022\033\010\034\025\035\013\036\017\037" +
    "\021\001\002\000\032\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\016\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\001\002\000\030\004\033\005\027\006\037" +
    "\007\034\011\036\013\040\016\030\017\041\020\031\021" +
    "\035\022\032\001\002\000\024\010\024\024\014\031\020" +
    "\032\022\033\010\034\025\035\013\036\017\037\021\001" +
    "\002\000\024\010\024\024\014\031\020\032\022\033\010" +
    "\034\025\035\013\036\017\037\021\001\002\000\024\010" +
    "\024\024\014\031\020\032\022\033\010\034\025\035\013" +
    "\036\017\037\021\001\002\000\024\010\024\024\014\031" +
    "\020\032\022\033\010\034\025\035\013\036\017\037\021" +
    "\001\002\000\024\010\024\024\014\031\020\032\022\033" +
    "\010\034\025\035\013\036\017\037\021\001\002\000\024" +
    "\010\024\024\014\031\020\032\022\033\010\034\025\035" +
    "\013\036\017\037\021\001\002\000\024\010\024\024\014" +
    "\031\020\032\022\033\010\034\025\035\013\036\017\037" +
    "\021\001\002\000\032\004\uffe7\005\uffe7\006\uffe7\007\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\001\002\000\024\010\024\024\014\031\020" +
    "\032\022\033\010\034\025\035\013\036\017\037\021\001" +
    "\002\000\024\010\024\024\014\031\020\032\022\033\010" +
    "\034\025\035\013\036\017\037\021\001\002\000\024\010" +
    "\024\024\014\031\020\032\022\033\010\034\025\035\013" +
    "\036\017\037\021\001\002\000\032\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\011\uffee\012\uffee\013\uffee\016\uffee\017\uffee" +
    "\020\uffee\021\uffee\022\uffee\001\002\000\032\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\011\ufff2\012\ufff2\013\ufff2\016\ufff2" +
    "\017\ufff2\020\ufff2\021\ufff2\022\ufff2\001\002\000\032\004" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\011\uffe9\012\uffe9\013\040" +
    "\016\030\017\041\020\031\021\035\022\032\001\002\000" +
    "\032\004\ufff0\005\ufff0\006\ufff0\007\ufff0\011\ufff0\012\ufff0" +
    "\013\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\001" +
    "\002\000\032\004\uffe8\005\uffe8\006\uffe8\007\uffe8\011\uffe8" +
    "\012\uffe8\013\040\016\030\017\041\020\031\021\035\022" +
    "\032\001\002\000\032\004\uffeb\005\uffeb\006\037\007\034" +
    "\011\uffeb\012\uffeb\013\040\016\030\017\041\020\031\021" +
    "\035\022\032\001\002\000\032\004\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\011\ufff1\012\ufff1\013\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\001\002\000\032\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\011\uffed\012\uffed\013\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\001\002\000\032\004\uffef" +
    "\005\uffef\006\uffef\007\uffef\011\uffef\012\uffef\013\uffef\016" +
    "\uffef\017\uffef\020\uffef\021\uffef\022\uffef\001\002\000\032" +
    "\004\uffea\005\uffea\006\037\007\034\011\uffea\012\uffea\013" +
    "\040\016\030\017\041\020\031\021\035\022\032\001\002" +
    "\000\024\010\024\024\055\031\020\032\022\033\010\034" +
    "\025\035\013\036\017\037\021\001\002\000\030\004\uffdf" +
    "\005\uffdf\006\uffdf\007\uffdf\011\060\013\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\001\002\000\030\004\033" +
    "\005\027\006\037\007\034\011\057\013\040\016\030\017" +
    "\041\020\031\021\035\022\032\001\002\000\032\004\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\011\uffe6\012\uffe6\013\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\001\002\000\032" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\001\002" +
    "\000\024\010\024\024\014\031\020\032\022\033\010\034" +
    "\025\035\013\036\017\037\021\001\002\000\032\004\033" +
    "\005\027\006\037\007\034\011\ufff3\012\ufff3\013\040\016" +
    "\030\017\041\020\031\021\035\022\032\001\002\000\024" +
    "\010\024\024\014\031\020\032\022\033\010\034\025\035" +
    "\013\036\017\037\021\001\002\000\030\004\033\005\027" +
    "\006\037\007\034\011\065\013\040\016\030\017\041\020" +
    "\031\021\035\022\032\001\002\000\032\004\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\011\uffe4\012\uffe4\013\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\001\002\000\004\002\000" +
    "\001\002\000\010\025\ufff6\033\ufff6\037\ufff6\001\002\000" +
    "\004\010\073\001\002\000\004\012\072\001\002\000\010" +
    "\025\ufff7\033\ufff7\037\ufff7\001\002\000\004\011\074\001" +
    "\002\000\004\014\075\001\002\000\030\010\024\024\014" +
    "\026\102\027\101\031\020\032\022\033\010\034\025\035" +
    "\013\036\017\037\021\001\002\000\032\010\ufffb\015\ufffb" +
    "\024\ufffb\026\ufffb\027\ufffb\031\ufffb\032\ufffb\033\ufffb\034" +
    "\ufffb\035\ufffb\036\ufffb\037\ufffb\001\002\000\032\010\ufffe" +
    "\015\ufffe\024\ufffe\026\ufffe\027\ufffe\031\ufffe\032\ufffe\033" +
    "\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\001\002\000\030" +
    "\004\033\005\027\006\037\007\034\012\127\013\040\016" +
    "\030\017\041\020\031\021\035\022\032\001\002\000\004" +
    "\010\121\001\002\000\004\010\107\001\002\000\032\010" +
    "\ufffc\015\ufffc\024\ufffc\026\ufffc\027\ufffc\031\ufffc\032\ufffc" +
    "\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\001\002\000" +
    "\032\010\024\015\106\024\014\026\102\027\101\031\020" +
    "\032\022\033\010\034\025\035\013\036\017\037\021\001" +
    "\002\000\032\010\uffff\015\uffff\024\uffff\026\uffff\027\uffff" +
    "\031\uffff\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037" +
    "\uffff\001\002\000\004\002\001\001\002\000\024\010\024" +
    "\024\014\031\020\032\022\033\010\034\025\035\013\036" +
    "\017\037\021\001\002\000\030\004\033\005\027\006\037" +
    "\007\034\011\111\013\040\016\030\017\041\020\031\021" +
    "\035\022\032\001\002\000\004\014\112\001\002\000\030" +
    "\010\024\024\014\026\102\027\101\031\020\032\022\033" +
    "\010\034\025\035\013\036\017\037\021\001\002\000\032" +
    "\010\024\015\114\024\014\026\102\027\101\031\020\032" +
    "\022\033\010\034\025\035\013\036\017\037\021\001\002" +
    "\000\034\010\ufff9\015\ufff9\024\ufff9\026\ufff9\027\ufff9\030" +
    "\115\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9" +
    "\037\ufff9\001\002\000\004\014\116\001\002\000\030\010" +
    "\024\024\014\026\102\027\101\031\020\032\022\033\010" +
    "\034\025\035\013\036\017\037\021\001\002\000\032\010" +
    "\024\015\120\024\014\026\102\027\101\031\020\032\022" +
    "\033\010\034\025\035\013\036\017\037\021\001\002\000" +
    "\032\010\ufffa\015\ufffa\024\ufffa\026\ufffa\027\ufffa\031\ufffa" +
    "\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\001" +
    "\002\000\024\010\024\024\014\031\020\032\022\033\010" +
    "\034\025\035\013\036\017\037\021\001\002\000\030\004" +
    "\033\005\027\006\037\007\034\011\123\013\040\016\030" +
    "\017\041\020\031\021\035\022\032\001\002\000\004\014" +
    "\124\001\002\000\030\010\024\024\014\026\102\027\101" +
    "\031\020\032\022\033\010\034\025\035\013\036\017\037" +
    "\021\001\002\000\032\010\024\015\126\024\014\026\102" +
    "\027\101\031\020\032\022\033\010\034\025\035\013\036" +
    "\017\037\021\001\002\000\032\010\ufff8\015\ufff8\024\ufff8" +
    "\026\ufff8\027\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035" +
    "\ufff8\036\ufff8\037\ufff8\001\002\000\032\010\ufffd\015\ufffd" +
    "\024\ufffd\026\ufffd\027\ufffd\031\ufffd\032\ufffd\033\ufffd\034" +
    "\ufffd\035\ufffd\036\ufffd\037\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\010\002\006\003\004\004\005\001\001\000" +
    "\002\001\001\000\004\004\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\014\011\015\012\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\014\011\015\012" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\014\011\015\012\052\001\001\000\010\004\014\011" +
    "\015\012\051\001\001\000\010\004\014\011\015\012\050" +
    "\001\001\000\010\004\014\011\015\012\047\001\001\000" +
    "\010\004\014\011\015\012\046\001\001\000\010\004\014" +
    "\011\015\012\045\001\001\000\010\004\014\011\015\012" +
    "\044\001\001\000\002\001\001\000\010\004\014\011\015" +
    "\012\043\001\001\000\010\004\014\011\015\012\042\001" +
    "\001\000\010\004\014\011\015\012\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\014\011\015\012\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\014\011\015\012\061\001\001\000\002\001\001" +
    "\000\010\004\014\011\015\012\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\014\005\103" +
    "\006\076\007\102\010\075\011\015\012\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\014\006\104\007\102\010\075\011\015\012\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\014\011" +
    "\015\012\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\014\005\112\006\076\007\102\010\075\011" +
    "\015\012\077\001\001\000\016\004\014\006\104\007\102" +
    "\010\075\011\015\012\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\014\005\116\006\076\007\102" +
    "\010\075\011\015\012\077\001\001\000\016\004\014\006" +
    "\104\007\102\010\075\011\015\012\077\001\001\000\002" +
    "\001\001\000\010\004\014\011\015\012\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\014\005\124" +
    "\006\076\007\102\010\075\011\015\012\077\001\001\000" +
    "\016\004\014\006\104\007\102\010\075\011\015\012\077" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // mainProgram ::= lstDeclaration MAIN LPAREN RPAREN LBRACE lstStatement RBRACE 
            {
              Object RESULT =null;
		 System.out.println("main"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainProgram",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= mainProgram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lstStatement ::= lstStatement statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lstStatement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lstStatement ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lstStatement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= ifStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= whileStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ifStatement ::= IF LPAREN expr RPAREN LBRACE lstStatement RBRACE ELSE LBRACE lstStatement RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ifStatement ::= IF LPAREN expr RPAREN LBRACE lstStatement RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // whileStatement ::= WHILE LPAREN expr RPAREN LBRACE lstStatement RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileStatement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lstDeclaration ::= lstDeclaration declaration SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lstDeclaration",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lstDeclaration ::= declaration SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lstDeclaration",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration ::= INT ID 
            {
              Object RESULT =null;
		 System.out.println("int id"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaration ::= INT ID ASSIGN expr 
            {
              Object RESULT =null;
		 System.out.println("int id = expr"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaration ::= ID ASSIGN expr 
            {
              Object RESULT =null;
		 System.out.println("id = expr"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // condition ::= expr EQUALS expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("igual"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // condition ::= expr GREATER expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("mayor"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // condition ::= expr LESS expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("menor"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // condition ::= expr AND expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("and"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // condition ::= expr OR expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("or"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // condition ::= expr DIF expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("diferente"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // condition ::= BOOLEAN 
            {
              Object RESULT =null;
		 System.out.println("boolean"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr ADD expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("suma"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr MINUS expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("resta"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr TIMES expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("multiplicacion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr DIV expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("division"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("parentesis"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= PUTS LPAREN expr RPAREN 
            {
              Object RESULT =null;
		 System.out.println("puts"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= PUTS LPAREN LITERAL RPAREN 
            {
              Object RESULT =null;
		 System.out.println("puts"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= PUTW LPAREN expr RPAREN 
            {
              Object RESULT =null;
		 System.out.println("putw"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= BREAK 
            {
              Object RESULT =null;
		 System.out.println("break"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= declaration 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= condition 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= ID 
            {
              Object RESULT =null;
		 System.out.println("id"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= LITERAL 
            {
              Object RESULT =null;
		 System.out.println("literal"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= INTEGER 
            {
              Object RESULT =null;
		 System.out.println("num"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
