package compi.logic;
import java_cup.runtime.*;
import compi.logic.datastructures.*;
import compi.codegenerator.*;
import java.util.Stack;

action code {:

	int ifCont = 0,
		ifContAux = 0,
		whileCont = 0,
		whileContAux = 0,
		subProgramCont = 0;
	Stack ifStack = new Stack();
	Stack whileStack = new Stack();
	StringBuilder semanticErrors;
	TypeTable tTable;
	CodeGenerator cGenerator;
	FinalCodeGenerator fGenerator;
        public  SemanticError sErrors =  SemanticError.createSemanticError();
	
	public void setSemanticErrrors(){
		sErrors.sb = semanticErrors;
	}
	
	private void generateFCode(){
		fGenerator = new FinalCodeGenerator(cGenerator.sBuilder.toString());
		fGenerator.generate();
	}
	
	private void initDataStructures(){
		semanticErrors = new StringBuilder(); 
		tTable = new TypeTable();
		cGenerator = CodeGenerator.getCodeGenerator(tTable);
	}
	
	private void errorIdDeclarationExist(String id){
		//crear un string builder para poner todos los posibles errores
		System.out.println("[ERROR]: El identificador <" + id + "> ya fue declarado.");
		semanticErrors.append("[ERROR]: El identificador <" + id + "> ya fue declarado. \n");
	}
	
	private void errorIdDeclarationNotExist(String id){
		//crear un string builder para poner todos los posibles errores
		System.out.println("[ERROR]: El identificador <" + id + "> no se ha declarado.");
		semanticErrors.append("[ERROR]: El identificador <" + id + "> no se ha declarado. \n");
	}
	
	/*private void errorTypeFormat(int type){
		//crear un string builder para poner todos los posibles errores
		System.out.println("[ERROR]: <" + type + "> no es un formato valido para un entero.");
		semanticErrors.append("[ERROR]: <" + type + "> no es un formato valido para un entero. \n");
	}*/
	
	private void errorNoWhileForBreak(){
		System.out.println("[ERROR]: Sentencia <break> fuera de un <while>");
		semanticErrors.append("[ERROR]: Sentencia <break> fuera de un <while> \n");
	}
	
	private void errorSubProgramDeclaration(String id){
		System.out.println("[ERROR]: No se puede declarar la variable <" + id + ">, ya existe un procedimiento <" + id + ">");
		semanticErrors.append("[ERROR]: No se puede declarar la variable <" + id + ">, ya existe un procedimiento <" + id + "> \n");
	}
	
	private void errorIdDeclarationSubProgram(String id){
		System.out.println("[ERROR]: Procedimiento <" + id + "> ya fue declarado");
		semanticErrors.append("[ERROR]: Procedimiento <" + id + "> ya fue declarado \n");
	}
	
	private void errorAssignNullProcedure(String id){
		System.out.println("[ERROR]: No se asigna ningun valor a la variable <" + id + ">");
		semanticErrors.append("[ERROR]: No se asigna ningun valor a la variable <" + id + "> \n");
	}
	
	private void errorAssignDiferentType(String id, Expression e){
		String type = "desconocido";
		
		switch (e.getType()) {
		case sym.INTEGER:
			type = "Integer";
			break;
			
		case sym.STRING:
			type = "STRING";
			break;
			
		case sym.BOOLEAN:
			type = "BOOLEAN";
			break;
		}
		System.out.println("[ERROR]: Variable <" + id + "> no es de tipo <" + type + ">");
		semanticErrors.append("[ERROR]: Variable <" + id + "> no es de tipo <" + type + "> \n");
	}
	
	private void errorNoProcedure(String id){
		System.out.println("[ERROR]: No existe el procedimiento <" + id + ">");
		semanticErrors.append("[ERROR]: No existe el procedimiento <" + id + "> \n");
	}
	
	private void errorPrintDiferentType(){
		System.out.println("[ERROR]: No es posible imprimir ese tipo de dato");
		semanticErrors.append("[ERROR]: No es posible imprimir ese tipo de dato\n");
	}
	
	private void validateIdsProcedures(){
		//validar si los ids que use, no existe ningun procedimiento
		//validar si el metodo declarado retorna el mismo tipo que la variable
	}
:}

parser code {:
/*
  public void report_fatal_error(String message, Object info){
      //System.err.println("Can't recover from previous error(s), giving up.");
      System.err.println("Error tipo 1");
    }

    public void report_error(String message, Object info){
      System.out.println("Error tipo 2");
    }
    
    public void syntax_error(Symbol cur_token){
    	System.out.println("Error tipo 3");
    }
    
    public void unrecovered_syntax_error(Symbol cur_token){
    	System.out.println("Error tipo 4");
    }*/
:};

terminal				ADD, MINUS;
terminal				TIMES, DIV;
terminal				LPAREN, RPAREN, LBRACE, RBRACE, SEMICOLON;
terminal				EQUALS, AND, OR, DIF, LESS, GREATER, ASSIGN;
terminal				MAIN, IF, ELSE, WHILE, BREAK, PUTW, PUTS, SUB_PROGRAM, RETURN, NULL;
terminal				INTEGER, STRING, BOOLEAN;
terminal String			STRING_LITERAL, INTEGER_LITERAL, BOOLEAN_LITERAL;
terminal String			ID;


non terminal			program, mainProgram, subProgram;
non terminal			lstDeclaration, lstStatement, lstSubProgram;
non terminal			declaration;
non terminal			statement;
non terminal			ifStatement, elseStatement;
non terminal			whileStatement, breakStatement;
non terminal			putwStatement, putsStatement;
non terminal Integer 	varType;
non terminal Expression	condition;
non terminal Expression expr;
non terminal Expression subProgramCall, returnStatement;

precedence left		ASSIGN;
precedence left		AND, OR;
precedence left		EQUALS, GREATER, LESS, DIF;
precedence left		ADD, MINUS;
precedence left		TIMES, DIV;
precedence left		LPAREN, RPAREN;


program ::=						{:
									initDataStructures();
								:}
						lstDeclaration mainProgram lstSubProgram
								{:
								//System.out.println(cGenerator.sBuilder);
								System.out.println("\n");
								validateIdsProcedures();
                                                                setSemanticErrrors();
								generateFCode();
								:} 
						;

lstDeclaration ::=		lstDeclaration declaration SEMICOLON
						|/*epsilon*/
						;

declaration ::=			varType:t ID:id
								{:
									if(tTable.getSymbol(id) == null){
										if(tTable.getProcedure(id) == null){
											tTable.addSymbol(id, t, cGenerator.direction++);
											tTable.addId(id, t);
											cGenerator.generateID(id);
										}else{
											errorIdDeclarationSubProgram(id);
										}
									}else{
										errorIdDeclarationExist(id);
									}
								:}
						| varType:t ID:id ASSIGN expr:e
								{:
									if(tTable.getSymbol(id) == null){
										if(tTable.getProcedure(id) == null){
											if(e != null){											
												if(e.getType() != sym.NULL){											
													if(t == e.getType()){
														tTable.addSymbol(id, t, cGenerator.direction++);
														tTable.addId(id, t);
														cGenerator.generateID(id);
														cGenerator.generateID_EXPR(id, e);
													}else{
														errorAssignDiferentType(id, e);
													}
												}else{
													errorAssignNullProcedure(id);
												}
											}
										}else{
											errorIdDeclarationSubProgram(id);
										}
									}else{
										errorIdDeclarationExist(id);
									}
								:}
						| ID:id ASSIGN expr:e
								{:
									if(tTable.getSymbol(id) != null){
										Integer t = tTable.getSymbol(id).getType();
										if(e != null){
											if(e.getType() != sym.NULL){											
												if(t == e.getType()){
													cGenerator.generateID_EXPR(id, e);
												}else{
													errorAssignDiferentType(id, e);
												}
											}else{
												errorAssignNullProcedure(id);
											}
										}
									}else{
										errorIdDeclarationNotExist(id);
									}
								:}
						;

varType ::=				INTEGER
								{:
									RESULT = sym.INTEGER;
								:}
						| STRING
								{:
									RESULT = sym.STRING;
								:}
						| BOOLEAN
								{:
									RESULT = sym.BOOLEAN;
								:}
						;

mainProgram ::=			MAIN LPAREN RPAREN LBRACE lstStatement RBRACE
						;

lstStatement ::=		lstStatement statement
						|/*epsilon*/
						;

statement ::=			expr SEMICOLON
						| ifStatement
						| whileStatement
						| breakStatement
						| putwStatement
						| putsStatement
						;

expr ::=				condition:e
								{:
                                	RESULT = e;
                                :}
						|expr:e1 ADD expr:e2 
                                {:
                                	RESULT = e1.add(e2);
                                :}
						| expr:e1 MINUS expr:e2 
                                {:
                                	RESULT = e1.sub(e2);
                                :}
						| expr:e1 TIMES expr:e2 
                                {:
                                	RESULT = e1.mul(e2);
                                :}
						| expr:e1 DIV expr:e2 
                                {:
                                	RESULT = e1.div(e2);
                                :}
						| LPAREN expr:e RPAREN
								{:
                                	RESULT = e;
                                :}
						| declaration
						| subProgramCall:e
								{:
                                	RESULT = e;
                                :}
						| ID:id
                                {:
                                	if(tTable.getSymbol(id) != null){
	                                	RESULT = new Expression(tTable.getSymbol(id).getDirection(), tTable.getSymbol(id).getType()); 
									}else{
										errorIdDeclarationNotExist(id);
									}
                                :}
						| STRING_LITERAL:l
                                {:
                                	Expression e = new Expression(cGenerator.direction++, sym.STRING);
                                	cGenerator.direction += l.length() - 2;
                                	cGenerator.generateStringLiteral(l, e);
                                	RESULT = e;
                                :}
						| INTEGER_LITERAL:i
                                {:
                                	Expression e = new Expression(cGenerator.direction++, sym.INTEGER);
                                	cGenerator.generateIntegerLiteral(i, e);
                                	RESULT = e;
                                :}
					;

condition ::=		expr:e1 EQUALS expr:e2
								{:
									RESULT = e1.equals(e2);
								:}
					| expr:e1 GREATER expr:e2
								{:
									RESULT = e1.greater(e2);
								:}
					| expr:e1 LESS expr:e2
								{:
									RESULT = e1.less(e2);
								:}
					| expr:e1 AND expr:e2
								{:
									RESULT = e1.and(e2);
								:}
					| expr:e1 OR expr:e2
								{:
									RESULT = e1.or(e2);
								:}
					| expr:e1 DIF expr:e2
								{:
									RESULT = e1.dif(e2);
								:}
					| BOOLEAN_LITERAL:b
								{:
									Expression e = new Expression(cGenerator.direction++, sym.BOOLEAN);
									cGenerator.generateBooleanLiteral(b, e);
									RESULT = e;
								:} 
					;

ifStatement ::=			IF 
								{:
									tTable.createScope();
									ifStack.push(++ifCont);
								:}
						LPAREN condition:e RPAREN
								{:
                                	cGenerator.generateBranchNotTrue("Else#" + ++ifCont, e);
								:}
						LBRACE lstStatement RBRACE
								{:
									tTable.deleteScope();
									cGenerator.generateBranch("EndIf#" + ifStack.peek());
								:}
						elseStatement
						;

elseStatement ::=		ELSE
								{:
									tTable.createScope();
									cGenerator.generateLabel("Else#" + ifStack.peek());
								:} 
						LBRACE lstStatement RBRACE
								{:
									tTable.deleteScope();
									cGenerator.generateLabel("EndIf#" + ifStack.peek());
									ifStack.pop();
								:}
						|/*epsilon*/
								{:
									cGenerator.generateLabel("Else#" + ifStack.peek());
									cGenerator.generateLabel("EndIf#" + ifStack.peek());
									ifStack.pop();
								:}
						;

whileStatement ::=		WHILE
								{:
									tTable.createScope();
									whileStack.push(++whileCont);
									cGenerator.generateLabel("InitWhile#" + whileStack.peek());
								:}
						LPAREN condition:e RPAREN
								{:
									cGenerator.generateBranchNotTrue("EndWhile#" + whileStack.peek(), e);
								:}
						LBRACE lstStatement RBRACE
								{:
									tTable.deleteScope();
									cGenerator.generateLabel("InitWhile#" + whileStack.peek());
									whileStack.pop();
								:}
						;

breakStatement ::=		BREAK SEMICOLON
								{:
									if(whileCont != 0){									
									
										cGenerator.generateBranch("EndWhile#" + whileCont);
									}else{
									
										errorNoWhileForBreak();
									}
								:}
						;

putwStatement ::=		PUTW LPAREN expr:e RPAREN SEMICOLON
								{:
									if(e.getType() == sym.INTEGER)
										cGenerator.printNumber(e);
									else
										errorPrintDiferentType();
								:}
						;

putsStatement ::=		PUTS LPAREN expr:e RPAREN SEMICOLON
								{:
									if(e.getType() == sym.STRING)
										cGenerator.printString(e);
									else
										errorPrintDiferentType();
								:}
						;

lstSubProgram ::=		lstSubProgram subProgram
						|/*epsilon*/
						;

subProgram ::=			ID:id
								{:
                                                                        tTable.createScope();
									if(tTable.getProcedure(id) == null){
										tTable.addProcedure(id, sym.NULL);
										cGenerator.generateLabel(id);
									}else{
										errorSubProgramDeclaration(id);
									}
								:}
						LPAREN RPAREN LBRACE lstStatement returnStatement:e RBRACE
								{:
									if(e != null){
										tTable.addProcedure(id, e.getType());
									}
                                                                        tTable.deleteScope();
								:}
						;

returnStatement ::=		RETURN expr:e SEMICOLON
								{:
									cGenerator.generateReturn(e);
									RESULT = e;
								:}
						|/*epsilon*/
						;

subProgramCall ::=		ID:id LPAREN RPAREN
								{:
									Integer t = tTable.getProcedure(id);
									if(t != null){
										cGenerator.generateSubProgramCall(id);
										RESULT = new Expression(0, t);
									}else{
										errorNoProcedure(id);
									}
								:}
						;


