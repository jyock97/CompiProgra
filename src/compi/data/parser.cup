package compi.logic;
import java_cup.runtime.*;
import compi.logic.datastructures.*;
import compi.codegenerator.CodeGenerator;

action code {:

	TypeTable tTable;
	CodeGenerator cGenerator;
	private void initDataStructures(){
		tTable = new TypeTable();
		cGenerator = CodeGenerator.getCodeGenerator(tTable);
	}
	
	private void errorIdDeclarationExist(String id){
		//crear un string builder para poner todos los posibles errores
		System.out.println("[ERROR]: El identificador <" + id + "> ya fue declarado.");
	}
	
	private void errorIdDeclarationNotExist(String id){
		//crear un string builder para poner todos los posibles errores
		System.out.println("[ERROR]: El identificador <" + id + "> no se ha declarado.");
	}
	
	private void errorIntFormat(String exp){
		//crear un string builder para poner todos los posibles errores
		System.out.println("[ERROR]: <" + exp + "> no es un formato valido para un entero.");
	}
:}

parser code {:
	//metodos por defecto de cup para errores
:}

terminal				ADD, MINUS;
terminal				TIMES, DIV;
terminal				LPAREN, RPAREN, LBRACE, RBRACE, SEMICOLON;
terminal				EQUALS, AND, OR, DIF, LESS, GREATER, ASSIGN;
terminal				LITERAL;
terminal            	MAIN, IF, WHILE, ELSE, PUTW, PUTS, INT, BREAK;
terminal String			INTEGER;
terminal String			BOOLEAN;
terminal String			ID;


non terminal        	program, mainProgram;
non terminal			lstDeclaration, lstStatement;
non terminal			declaration, statement, ifStatement, whileStatement, putwStatement, putsStatement, breakStatement;
non terminal			condition;
non terminal Expression expr;

precedence left		ASSIGN;
precedence left		AND, OR;
precedence left		EQUALS, GREATER, LESS, DIF;
precedence left		ADD, MINUS;
precedence left		TIMES, DIV;
precedence left		LPAREN, RPAREN;


program ::=					{:
								initDataStructures();
							:}
					lstDeclaration mainProgram 
					| mainProgram
					;

mainProgram ::=		MAIN LPAREN RPAREN LBRACE lstStatement RBRACE {:  :}
					| MAIN LPAREN RPAREN LBRACE RBRACE {:  :}
					;

lstStatement ::=	lstStatement statement
					|statement
					;

statement ::=		expr SEMICOLON
					| condition SEMICOLON
					| ifStatement
					| whileStatement
					| putwStatement
					| putsStatement
					| breakStatement
					| SEMICOLON
					;

ifStatement ::=		IF LPAREN condition RPAREN LBRACE lstStatement RBRACE ELSE LBRACE lstStatement RBRACE
					| IF LPAREN expr RPAREN LBRACE lstStatement RBRACE
					;

whileStatement ::=	WHILE LPAREN condition RPAREN LBRACE lstStatement RBRACE
					;
					
putwStatement ::= 	PUTW LPAREN expr RPAREN
                                {: System.out.println("putw"); :}
                    ;
                    
putsStatement ::=	PUTS LPAREN expr RPAREN
                                {: System.out.println("puts"); :}
					| PUTS LPAREN LITERAL RPAREN
                                {: System.out.println("puts"); :}
					;
					
breakStatement ::=	BREAK
					;

lstDeclaration ::=	lstDeclaration declaration SEMICOLON
					|declaration SEMICOLON
					;

declaration ::=		INT ID:id
								{:
									if(tTable.getSymbol(id) == null){
										tTable.addSymbol(id, sym.INTEGER, cGenerator.memory--);
										cGenerator.generateID(id);
									}else{
										errorIdDeclarationExist(id);
									}
								:}
					| INT ID:id	
								{:
									if(tTable.getSymbol(id) == null){
										tTable.addSymbol(id, sym.INTEGER, cGenerator.memory--);
										cGenerator.generateID(id);
									}else{
										errorIdDeclarationExist(id);
									}
								:} 
					ASSIGN expr:e
								{:
									try {
										//new Integer(e.getValue());
										cGenerator.generateID_EXPR(id, e);
									} catch (NumberFormatException exe) {
										errorIntFormat( e.getValue());
									}
								:}
					| ID:id ASSIGN expr:e
								{:
									if(tTable.getSymbol(id) != null){
										try {
											//new Integer( e.getValue());
											tTable.setSymbol(id,  e.getValue());
											cGenerator.generateID_EXPR(id, e);
										} catch (NumberFormatException exe) {
											errorIntFormat(e.getValue());
										}
									}else{
										errorIdDeclarationNotExist(id);
									}
								:}
					;

condition ::=		expr:e1 EQUALS expr:e2 
                                {:  :}
					| expr:e1 GREATER expr:e2 
                                {:  :}
					| expr:e1 LESS expr:e2 
                                {:  :}
					| expr:e1 AND expr:e2 
                                {:  :}
					| expr:e1 OR expr:e2 
                                {:  :}
					| expr:e1 DIF expr:e2 
                                {:  :}
					| BOOLEAN  
                                {:  :} 
					;

expr ::=			expr:e1 ADD expr:e2 
                                {: 
                                	RESULT = e1.add(e2);
                                :}
					| expr:e1 MINUS expr:e2 
                                {:
                                	RESULT = e1.sub(e2);
                                :}
					| expr:e1 TIMES expr:e2 
                                {:
                                	RESULT = e1.mul(e2);
                                :}
					| expr:e1 DIV expr:e2 
                                {:
                                	RESULT = e1.div(e2);
                                :}
					| LPAREN expr:e RPAREN
					| declaration
					| ID:id
                                {:
                                	if(tTable.getSymbol(id) != null){
	                                	RESULT = new Expression(id, tTable.getSymbol(id).getDirection()); 
									}else{
										errorIdDeclarationNotExist(id);
									}
                                :}
					| LITERAL:e
                                {:  :}
					| INTEGER:i
                                {:
                                	Expression e = new Expression(i, cGenerator.memory--);
                                	cGenerator.generateIntLiteral(e);
                                	RESULT = e;
                                :}
					;
